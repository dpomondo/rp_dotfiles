"                          ___           ___           ___     
"                         /\  \         /\__\         /\  \    
"                         \:\  \       /:/  /        /::\  \   
"                          \:\  \     /:/__/        /:/\:\  \  
"                          /::\  \   /::\  \ ___   /::\~\:\  \ 
"                         /:/\:\__\ /:/\:\  /\__\ /:/\:\ \:\__\
"                        /:/  \/__/ \/__\:\/:/  / \:\~\:\ \/__/
"                       /:/  /           \::/  /   \:\ \:\__\  
"                       \/__/            /:/  /     \:\ \/__/  
"                                       /:/  /       \:\__\    
"                                       \/__/         \/__/    
"                          ___           ___           ___     
"                         /\__\         /\  \         /\  \    
"                        /:/ _/_       /::\  \        \:\  \   
"                       /:/ /\__\     /:/\:\  \        \:\  \  
"                      /:/ /:/ _/_   /::\~\:\  \       /::\  \ 
"                     /:/_/:/ /\__\ /:/\:\ \:\__\     /:/\:\__\
"                     \:\/:/ /:/  / \:\~\:\ \/__/    /:/  \/__/
"                      \::/_/:/  /   \:\ \:\__\     /:/  /     
"                       \:\/:/  /     \:\ \/__/     \/__/      
"                        \::/  /       \:\__\                  
"                         \/__/         \/__/                  
"                          ___           ___           ___     
"                         /\  \         /\  \         /\__\    
"                        /::\  \       /::\  \       /:/ _/_   
"                       /:/\:\  \     /:/\:\  \     /:/ /\__\  
"                      /:/  \:\  \   /:/  \:\  \   /:/ /:/ _/_ 
"                     /:/__/ \:\__\ /:/__/ \:\__\ /:/_/:/ /\__\
"                     \:\  \  \/__/ \:\  \ /:/  / \:\/:/ /:/  /
"                      \:\  \        \:\  /:/  /   \::/_/:/  / 
"                       \:\  \        \:\/:/  /     \:\/:/  /  
"                        \:\__\        \::/  /       \::/  /   
"                         \/__/         \/__/         \/__/    
"             ___                       ___           ___           ___     
"            /\__\          ___        /\__\         /\  \         /\  \    
"           /:/  /         /\  \      /::|  |       /::\  \       /::\  \   
"          /:/  /          \:\  \    /:|:|  |      /:/\:\  \     /:/\:\  \  
"         /:/__/  ___      /::\__\  /:/|:|__|__   /::\~\:\  \   /:/  \:\  \ 
"         |:|  | /\__\  __/:/\/__/ /:/ |::::\__\ /:/\:\ \:\__\ /:/__/ \:\__\
"         |:|  |/:/  / /\/:/  /    \/__/~~/:/  / \/_|::\/:/  / \:\  \  \/__/
"         |:|__/:/  /  \::/__/           /:/  /     |:|::/  /   \:\  \      
"          \::::/__/    \:\__\          /:/  /      |:|\/__/     \:\  \     
"           ~~~~         \/__/         /:/  /       |:|  |        \:\__\    
"                                      \/__/         \|__|         \/__/    
"
" Here be some things I tweaked to makes my vim be more
" likes what I likes and not what it is normally
" -----------------------------------------------------------------------------
"
" Vi is old and weak. Vim is strong. The strong need not respect the weak. The
" strong need not sympathize with the weak. The strong should eat the heart of
" the weak. But certainly the strong shouldn't be COMPATIBLE with the weak. Nope.
"
" Note: nerds on the internet say don't ACTUALLY set nocompatible
" set nocompatible
"
" -----------------------------------------------------------------------------
" BEGIN the VUNDLE-ING                                                      
" --------------------------------------------------------------------------
" required!
filetype off
" Better check to make sure vundle exists:
if !isdirectory(expand('~/.vim/bundle/Vundle.vim', 1))
    silent !git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
endif

set rtp+=~/.vim/bundle/Vundle.vim " set the runtime path to include Vundle
call vundle#begin()
"
" *****************************************************************************
" *    The bundles you install will be listed here                            *
" *****************************************************************************
"
" -----------------------------------------------------------------------------
" let Vundle manage Vundle
" --------------------------------------------------------------------------
Plugin 'gmarik/Vundle.vim'
" 
" -----------------------------------------------------------------------------
"  Colors! Colors! MOar Colors!
" --------------------------------------------------------------------------
"
" Plugin 'jaapie/vim-colours-dusk'
" Plugin 'nanotech/jellybeans.vim'
" Plugin 'cocopon/iceberg.vim'
" Plugin 'morhetz/gruvbox'
" Plugin 'gosukiwi/vim-atom-dark'
" Plugin 'joshdick/onedark.vim'
" Plugin 'geoffharcourt/one-dark.vim'
" Plugin 'junegunn/seoul256.vim'
" Plugin 'tomasr/molokai'
" Plugin 'arzg/vim-colors-xcode'
" Plugin 'tpope/vim-vividchalk'
" Plugin 'reedes/vim-colors-pencil'
" Plugin 'vim-scripts/Liquid-Carbon'
" Plugin 'baskerville/bubblegum'
" Plugin 'vim-scripts/darkslategray.vim'
" Plugin 'ciaranm/inkpot'
Plugin 'NLKNguyen/papercolor-theme'
"
" -----------------------------------------------------------------------------
" vim-airline -- bzzz bzzzz
" --------------------------------------------------------------------------
Plugin 'vim-airline/vim-airline'

let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#show_buffers=0
let g:airline#extensions#tabline#show_tabs=0
let g:airline#extensions#bufferline#enabled = 1
"
" Here is where a custom statusline would live, if I had the patience to learn
" how to make custom statuslines:
"
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" unicode symbols
" let g:airline_left_sep = '▶'
" let g:airline_right_sep = '◀'
" let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'

let g:airline#extensions#tabline#left_sep = '>'
let g:airline#extensions#tabline#left_alt_sep = '>'
" let g:airline_theme='luna'
" <This space intentionally left blank/>
"
set laststatus=2        " reserve second-to-last line for statusline
" set statusline=0      " uncomment (and comment out above)to kill the statusline
" 
" -----------------------------------------------------------------------------
" Gundo and undo
" --------------------------------------------------------------------------
Plugin 'sjl/gundo.vim'
" compiled with python3 but not python 2 requires this or gundo breaks:
let g:gundo_prefer_python3 = 1
" This is where th <F5> becomes the Gundo key. And remember:
" Gundo always shot first.
nnoremap <F5> :GundoToggle<CR>
" 
" -----------------------------------------------------------------------------
" Comments are strictly reserved for the opinionated
" --------------------------------------------------------------------------
Plugin 'tpope/vim-commentary'
"
" -----------------------------------------------------------------------------
" Files and Directories!
" --------------------------------------------------------------------------
"
" --------------------------------------------------------------------------
" ALL plugins must be above this line -----------------------------------------
" --------------------------------------------------------------------------
"
" Here we make the vundle-ing happen: --------------------------------------
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
"
" *****************************************************************************
" **  END the VUNDLE-ING                                                     **
" *****************************************************************************
"
" -----------------------------------------------------------------------------
" vim directories -- keeping stuff organized since... earlier today         
" -----------------------------------------------------------------------------
"
" some stuff I stole from a dude on the internet:
if !isdirectory(expand('~/.vim/undo/', 1))
    silent call mkdir(expand('~/.vim/undo', 1), 'p')
endif
"
if !isdirectory(expand('~/.vim/backup/', 1))
    silent call mkdir(expand('~/.vim/backup', 1), 'p')
endif
"
if !isdirectory(expand('~/.vim/swap/', 1))
    silent call mkdir(expand('~/.vim/swap', 1), 'p')
endif
" Why TWO slashes at the end? No more name collision:
" http://stackoverflow.com/a/15317146
set backupdir=~/.vim/backup//
set undodir=~/.vim/undo//
set directory=~/.vim/swap//
set backup                              " juuuust in case. Knock on wood.
set undofile                            " multiple udos saved between sessions
set swapfile                            " swapping...
" 
" -----------------------------------------------------------------------------
" General settings and options                                              
" --------------------------------------------------------------------------
set viminfo='50,h,n~/.vim/viminfo       " keeping it all in the same place
                                        " '50 -- keep 50 files of stuff
                                        " n~/.vim... location of viminfo file
                                        " h .. disable 'hlsearch' when
                                        " reloading the viminfo file
set backspace=indent,eol,start
                    " backspace over ALL the things
set encoding=utf-8  " Damn unicode. Just damn it.
set scrolloff=5     " keep some context around cursor
set noshowmode      " show Insert, Replace or Visual mode on command line
                    " setting 'showmode' off since statusline shows mode
set showcmd         " shows incomplete commands on the right side of the
                    " command line as they are being typed
                    " also shows lines/matrix Visual selection on the
                    " right side of the command line
set wildmenu        " turns on enhanced command line auto-completion
set wildmode=full   " if 'wildmode' is set to 'full', the wildmenu replaces the
                    " statusline with possible command matches
" set wildmode=list:longest
                    " controls behavior of command line completion
set visualbell      " visual insteead of auditory bell
set ruler           " Total lines and percent place in file in statusline
set hidden          " allow files to be hidden instead of requiring saves
set matchpairs+=<:> " the % command can jump between angles
augroup focus       " turns on autosave when you alt-tab to another program
    autocmd!
    autocmd FocusLost * :wa
augroup END

" Text Formating -----------------------------------------------------------
" see 'fo-table' for full options
set formatoptions+=q    " q: allow formatting of comments with 'gq'
set formatoptions+=r    " r: insert comment leader after hitting <Enter> in insert mode
set formatoptions+=n1   " n: recognize numbered lists
                        " n1: first item wraps
set formatoptions+=j    " j: remove comment leader when joining lines
set formatoptions+=c    " c: auto-wrap comments after 'textwidth'
set formatoptions+=o    " o: auto-insert comment leader after hitting 'o'
                        " or 'O' in normal mode
"
set wrap                " VISUALLY wrap lines longer than the window width
set textwidth=79        " maximum width before inserted text is auto-wrapped
" 
"
" Looks and Feels-----------------------------------------------------------
" set colorcolumn=81      " visual reminder of the 'right' line length
" set cursorline          " turns on line indicating current cursor row
" set cursorcolumn      " uncomment if we want a colored cursor column
set showmatch           " show matching parenthesis
"
set listchars=tab:>~,trail:.
                        " Set up display of tabs and trailing whitespace
augroup insert_list
    autocmd!
    autocmd InsertEnter *   :set nolist
    autocmd InsertLeave *   :set list                " turn on display of listchars
augroup END
" Line Numbers in the gutter --------------------------------------------------
" 'nu' + 'nornu' in Insert, 'nu' + 'rnu' in Normal and Visual
set number              " 'number' always on
augroup insert_numbers
    autocmd!
    autocmd BufEnter    * :set relativenumber       " initialize or it gets wonky
    autocmd InsertEnter * :set norelativenumber
    autocmd InsertLeave * :set relativenumber
augroup END
set numberwidth=7       " constant gutter size
"
" INSERT and NORMAL modes can have different cursors in terminal mode:
" tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
" https://gist.github.com/andyfowler/1195581
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
"
" Tabs and Tab Behavior ----------------------------------------------------
"
" nerds on the internet have their opinions:
" https://old.reddit.com/r/vim/wiki/tabstop
"
set tabstop=8           " no one should use tabs anyway
set softtabstop=4
set shiftwidth=4
set smarttab            " uses 'shiftwidth' for tabs at start of line
set expandtab           " turns tabs into the right number of spaces instead
"
set autoindent          " always set autoindenting on
set copyindent          " copy the previous indentation on autoindenting
"
set shiftround          " use multiple of shiftwidth when indenting with '<' and '>'
" 
"
" Searching ----------------------------------------------------------------
set ignorecase          " ignore case when searching
set smartcase           " ignore case if search pattern is all lowercase,
set gdefault            " replace globally on lines
set hlsearch            " highlight search terms
set incsearch           " show search matches as you type
set showmatch
nnoremap <CR> :noh<CR><CR>
                        " Toggle off search highlighting
"
" Mouse mouse mouse in the house house house -------------------------------
set mouse-=a            " First, we kill the mouse in all modes
" set mouse=a           " swap in this line to get the mouse back
" set mouse=n           " mouse in normal and visual
" set mouse=v
" set mouse-=i          " no mouse in insert
set ttyfast             " sends more characters for faster redraws
"set ttymouse=xterm2     " sets the terminal type for sending mouse codes.
                        " 'xterm2' reports mouse position during dragging.
" 
" Filetypes ----------------------------------------------------------------
syntax enable
augroup override_filetypedetect
" the tmux.vim syntax file linked from the tmux 2.0 script examples
    autocmd!
    autocmd BufNewFile,BufRead .tmux.conf*,tmux.conf*  set filetype=tmux
    autocmd BufNewFile,BufRead .zshrc,.zsh*,*.zsh      set filetype=zsh
    autocmd BufNewFile,BufRead .vimrc,.vim*            set filetype=vim
    autocmd BufNewFile,BufRead .shell/profile          set filetype=zsh
    autocmd BufNewFile,Bufread *.pde                   set filetype=java
    " autocmd BufNewFile,Bufread *.ino                   set filetype=arduino
augroup END

augroup filetype_vim
    autocmd!
    autocmd Filetype vim    set foldenable
    autocmd Filetype vim    set foldminlines=10
    autocmd FileType vim    set foldmethod=marker
augroup END
"
" end of General Options                                                    
"
" -----------------------------------------------------------------------------
" Key Remappings                                                            
" (that don't fit in with sepcific plugins)
" --------------------------------------------------------------------------
" <tab> can now scoot around braces etc
nnoremap <tab> %
vnoremap <tab> %
"
" These disable the arrow keys while in insert mode. They are designed
" to appeal to the masochist inside all of us.
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk
"
" Here we kill the <F1> as <help>; gonna have to type `:help' all on your own
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
" 
"
" New mappings & new commands-----------------------------------------------
"   convert whole words to UPPERCASE
inoremap <C-u> <esc>viwUei
nnoremap <C-u> viwUe<esc>
"   CONVERT WHOLE WORDS TO lowercase
inoremap <C-l> <esc>viwuei
nnoremap <C-l> viwue<esc>
"   open .vimrc in a split
nnoremap <leader>ev :split $MYVIMRC<cr>
"   auto-wrap words in quotes
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
"   auto-wrap words in parens
nnoremap <leader>( viw<esc>a)<esc>hbi(<esc>lel
nnoremap <leader>) viw<esc>a)<esc>hbi(<esc>lel
"   auto-wrap words in curly braces
nnoremap <leader>{ viw<esc>a}<esc>hbi{<esc>lel
nnoremap <leader>} viw<esc>a}<esc>hbi{<esc>lel
"   auto-wrap words in square brackets
nnoremap <leader>[ viw<esc>a]<esc>hbi[<esc>lel
nnoremap <leader>] viw<esc>a]<esc>hbi[<esc>lel
"
" ----------------------------------------------------------------------------
"  Abbreviations
" --------------------------------------------------------------------------
iabbrev adn and
iabbrev Flase False
" 
" end of remappings                                                         

" -----------------------------------------------------------------------------
"  Colorschemes Config                                                      
" --------------------------------------------------------------------------
"
set t_Co=256    " enable 256-color mode
set background=dark
"
" Overrides-----------------------------------------------------------------
" These need to be before any colorschemes are called
" https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f
"
function! DpoyesacHighlights() abort
    highlight Folded    ctermbg=blue
    highlight Comment   cterm=italic
    " highlight Comment   cterm=italic ctermfg=237 ctermbg=None
    " highlight Normal    cterm=None   ctermfg=255 ctermbg=Black
    highlight Todo      cterm=bold   ctermfg=magenta ctermbg=None
endfunction

augroup dpoColors
    autocmd!
    autocmd ColorScheme * call DpoyesacHighlights()
augroup END
" 
" -----------------------------------------------------------------------------
" And here we have the colorscemes:
" -----------------------------------------------------------------------------
"
" Gruvbox-------------------------------------------------------------------
" let g:gruvbox_italic=1                  " turn on the sweet sweet slanties
" let g:gruvbox_contrast_dark='medium'
" let g:gruvbox_contrast_light='hard'
" colorscheme gruvbox
" highlight LineNr ctermbg=237
"
" -----------------------------------------------------------------------------
" Individual Themes 
" --------------------------------------------------------------------------
" colorscheme atom-dark-256
" colorscheme jellybeans
" colorscheme vividchalk
" colorscheme molokai
colorscheme PaperColor
"
" -----------------------------------------------------------------------------
" end of colorschemes                                                       
" -----------------------------------------------------------------------------
"
" much of what I've stolen I've stolen from here:
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/#bundles-i-use
"
" Other useful places what I've stolen from:
"
" http://sjl.bitbucket.org/gundo.vim/
" http://sontek.net/blog/detail/turning-vim-into-a-modern-python-ide
" https://github.com/gmarik/Vundle.vim
" http://www.jeffknupp.com/blog/2013/12/04/my-development-environment-for-python/
